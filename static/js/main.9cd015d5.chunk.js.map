{"version":3,"sources":["components/Square.js","components/Board.js","helpers.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["style","border","backgroundColor","fontSize","fontWeight","cursor","outline","Square","value","onClick","Board","squares","dimension","Math","floor","sqrt","length","width","height","margin","display","gridTemplate","map","square","i","directions","expand","board","row","col","direction","res","index","curPlayer","incremental","incrementalX","incrementalY","j","Game","useState","setDimension","Array","fill","setBoard","xIsNext","setXIsNext","win","setWin","winner","setWinner","curMove","setMove","useEffect","winCond","TwoDBoard","push","coorRow","coorCol","player","Number","calculate","handleInput","event","target","name","handleBoardSize","preventDefault","instruction","console","log","alignItems","justifyContent","newBoard","x","onSubmit","onChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cd015d5.chunk.js","sourcesContent":["import React from 'react';\n\nconst style = {\n    border: '4px solid darkblue',\n    backgroundColor: 'white',\n    fontSize: '30px',\n    fontWeight: '800',\n    cursor: 'pointer',\n    outline: 'none'\n}\n\nconst Square = ({value, onClick}) => {\n    return (\n        <button style = {style} onClick = {onClick}> {value} </button>\n    )\n\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square'\n\n\n\nconst Board = ({squares, onClick}) => {\n    const dimension = Math.floor(Math.sqrt(squares.length))\n    const width = dimension*100\n    const style = {\n        width: `${width}px`,\n        height: `${width}px`,\n        margin: '10px 10px',\n        display: 'grid',\n        gridTemplate: `repeat(${dimension}, 1fr) / repeat(${dimension}, 1fr)`\n    }\n\n    return (\n        <div style = {style}>\n            {squares.map((square, i) => ( \n                <Square key={i} value = {square} onClick={() => onClick(i)}/>\n            ))}\n        </div>\n    )\n\n}\n\nexport default Board;\n","\n//V: Vertical, H: Horizontal, D: diagnal\nconst directions = [[[1,0],[-1,0]],[[0,1],[0,-1]],[[-1,-1],[1,1]],[[-1,1],[1,-1]]]\n\n\nfunction expand(board, row, col, direction, res, index, curPlayer) {\n    for (let i = 0; i < direction.length; i++) {\n        let incremental = direction[i]\n        let incrementalX = incremental[0]\n        let incrementalY = incremental[1]\n        for (let i = row+incrementalX, j = col+incrementalY; i >= 0 && i < board.length && j >= 0 && j < board[0].length && board[i][j] === curPlayer; i+=incrementalX, j+=incrementalY) {\n            res[index]++\n        }\n        \n    }\n}\n\n//Function to check the winning condition base on the winning standard (3,4 or 5)\nexport function calculate(curMove, board, winCond, xIsNext) {\n    //Change from 1D to 2D\n    let TwoDBoard = []\n    let width = Math.sqrt(board.length)\n    for (let i = 0; i < width; i++) {\n        let row = []\n        for (let j = 0; j < width; j++) {\n            row.push(board[width*i + j]);\n        }\n        TwoDBoard.push(row)\n    }\n\n    var coorRow = Math.floor(curMove/width)\n    var coorCol = curMove%width\n    let player = xIsNext ? \"O\" : \"X\"\n    let res = Array(4).fill(1)\n    for (let i = 0; i < directions.length; i++) {\n        expand(TwoDBoard, coorRow, coorCol, directions[i], res, i, player)\n    }\n    \n    let winner = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] === Number(winCond)) {\n            winner = player\n        }\n    }\n    return winner\n};","import React, {useState, useEffect} from 'react';\nimport Board from './Board'\nimport {calculate} from '../helpers'\n\n\n\nconst Game = () => {\n    const style = {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent:'center'\n    }\n    const DEFAULT_VALUE = 3;\n    const [dimension, setDimension] = useState(DEFAULT_VALUE)\n    const [board, setBoard] = useState(Array(dimension*dimension).fill(null))\n    const [xIsNext, setXIsNext] = useState(true)\n    const [win, setWin] = useState(DEFAULT_VALUE)\n    const [winner, setWinner] = useState(0)\n    const [curMove, setMove] = useState(null)\n\n    useEffect(() => {\n        setWinner(calculate(curMove, board, win, xIsNext))\n    }, [curMove]);\n\n    const handleClick = (i) => {\n        let newBoard = [...board]\n        let x = xIsNext\n        if (newBoard[i] == null && winner == 0) {\n            newBoard[i] =  x ? 'X' : 'O'\n            setMove(i)\n            setBoard(newBoard)\n            setXIsNext(!x)\n        }\n        \n    }\n\n    const handleInput = (event) => {\n        const { value, name } = event.target\n        name === \"boardSize\" ? setDimension(event.target.value) : setWin(event.target.value)\n    }\n\n    const handleBoardSize = (event) => {\n        event.preventDefault()\n        setBoard(Array(dimension*dimension).fill(null))\n        //Need to set other variable to default too\n        setWinner(0)\n        setMove(null)\n        setXIsNext(true)\n    }\n\n    const handleWinCond = (event) => {\n        event.preventDefault()\n        setWin(event.target.value)\n        setBoard(Array(dimension*dimension).fill(null))\n        //Need to set other variable to default too\n        setWinner(0)\n        setMove(null)\n        setXIsNext(true)\n    }\n\n    //Dimension may be should be a drop down list\n    const menu = () =>  {\n        return (\n            <div>\n                <p>{instruction()}</p>\n\n                <button onClick={handleBoardSize}>Reset</button>\n                <form onSubmit={handleBoardSize}>\n                    <label>Board Size: </label>\n                    <select\n                        value = {dimension}\n                        onChange={handleInput}\n                        name=\"boardSize\"\n                    >\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"6\">6</option>\n                        <option value=\"7\">7</option>\n                        <option value=\"8\">8</option>\n                        <option value=\"9\">9</option>\n\n                    </select>\n                    <button>Change</button>\n                </form>\n\n                <label>Play to: </label>\n                <select\n                    value = {win}\n                    onChange={handleInput}\n                    name=\"winCond\"\n                >\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n\n                </select>\n\n            </div>\n        )\n    }\n\n    const instruction = () => {\n        console.log(winner)\n        if(winner) {\n            //We should alert something and stop any board actions\n            //Then we would allow user to restart the game\n            return `${winner} is the winner`\n        }\n        return xIsNext ? \"X is next\" : \"O is next\"\n    }\n    return (\n        <div style = {style}>\n            <Board squares={board} onClick={handleClick}/>\n            {menu()}\n        </div>\n        \n    )\n\n}\n\nexport default Game;\n","import Game from './components/Game'\nimport React from 'react'\n\nconst App = () => {\n  return (\n   <div>\n     <Game/>\n   </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}